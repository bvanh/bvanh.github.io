{"version":3,"sources":["components/home.js","components/quiz.js","components/result.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","currentQuiz","timeOut","newInterval","newMinute","newSeconds","className","Button","color","size","onClick","startQuiz","Quiz","listQuiz","statusButton","pritQuiz","correct","statusAnswer","status","printQuiz","question","printAnswer","answer","map","index","key","checkAnswer","backQuestion","disabled","submitQuestion","nextQuestion","id","Result","newCorrect","showAnswer","isAnswer","printCorrect","reduce","a","b","printShowanswer","show","resetQuiz","backHome","App","state","listquiz","currentquiz","totalcorrect","isanswered","statusbtn","showanswer","minute","seconds","timeout","interval","newStatusbtn","this","slice","setInterval","setState","setTimeout","clearInterval","newStatuslistquiz","JSON","parse","stringify","console","log","clearTimeout","bind","chooseAnswer","submit","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d598a06.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\n\r\nfunction Home(props){\r\nconst {currentQuiz,timeOut,newInterval,newMinute,newSeconds}=props\r\nif(currentQuiz===''){\r\n    return(\r\n           <div className=\"start\">\r\n              <h1>Welcome to Quiz-Game !?</h1>\r\n              <h4>In 30 seconds</h4>\r\n              <Button color=\"primary\" size=\"lg\"onClick={()=>props.startQuiz(currentQuiz,timeOut,newInterval,newMinute,newSeconds)}>Let's Go</Button>\r\n          </div>\r\n    )\r\n}else {\r\n    return null\r\n}\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nfunction Quiz(props) {\r\n    const { listQuiz, currentQuiz,statusButton,newMinute,newSeconds} = props\r\n\r\n    if (currentQuiz !== ''&& currentQuiz>= 0) {\r\n        const pritQuiz = listQuiz[currentQuiz] || {};\r\n        const correct = pritQuiz.correct;\r\n        const statusAnswer=pritQuiz.status;\r\n        const printQuiz = pritQuiz.question;\r\n        const listAnswer = pritQuiz.answer || [];\r\n        const printAnswer = listAnswer.map((answer, index) =>\r\n\r\n            <button className={statusAnswer[index]} key={index} onClick={() => props.checkAnswer(answer,correct,currentQuiz,index)}>{answer}</button>\r\n\r\n        )\r\n        return (\r\n            <div>\r\n                <h1 className='a'>Quiz</h1>\r\n                <div className='quiz'>\r\n                    <h3>\r\n                        {printQuiz}\r\n                    </h3>\r\n                    {printAnswer}\r\n                    <div className='next'>\r\n                        <button className={statusButton[0]} onClick={() => props.backQuestion(currentQuiz)} disabled={statusButton[1]}>Back</button>\r\n                        <button className={statusButton[0]} onClick={() => props.submitQuestion(currentQuiz)} disabled={statusButton[2]}>Submit</button>\r\n                        <button className={statusButton[0]} onClick={() => props.nextQuestion(currentQuiz)} disabled={statusButton[3]}>Next</button>\r\n                    </div>\r\n                    <footer>\r\n                        <span id=\"progress\">Question {currentQuiz + 1} of 5</span><span id='time'>{newMinute<10?'0'+newMinute:newMinute}:{newSeconds<10?'0'+newSeconds:newSeconds}</span>\r\n                    </footer>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Quiz;","import React from 'react';\r\n\r\nfunction Result(props) {\r\n    const { statusButton, currentQuiz, newCorrect, showAnswer, isAnswer,newMinute,newSeconds,timeOut,newInterval } = props\r\n    if (currentQuiz === 'result') {\r\n        const printCorrect = newCorrect.reduce((a, b) => a + b, 0)\r\n        const printShowanswer = showAnswer.map((show, index) =>\r\n            <span key={index}>\r\n                Question {index + 1}: {show} .\r\n            </span>\r\n\r\n        )\r\n        return (\r\n            <div>\r\n                <h1 className='a'>Quiz</h1>\r\n                <h2>\r\n                        Finish!!!\r\n                    </h2>\r\n                <div className='quiz'>\r\n                    \r\n                    <div>\r\n                        <h6>\r\n                            <b>Yours Score: {printCorrect}/5 Quiz</b></h6>\r\n                          <h6>  <b>Yours Time: {newMinute<10?'0'+newMinute:newMinute}p{newSeconds<10?'0'+newSeconds:newSeconds}s</b>\r\n                        </h6>\r\n                    </div>\r\n                    <div className='next'>\r\n                        <button className={statusButton[0]} onClick={() => props.resetQuiz(newMinute,newSeconds,timeOut,newInterval)}>TryAgain</button>\r\n                        <button className={statusButton[0]} onClick={() => props.printAnswer()}>CheckAnswer</button>\r\n                        <button className={statusButton[0]} onClick={() => props.backHome()}>Homepage</button>\r\n                    </div>\r\n                    {isAnswer &&\r\n                        <div className='showanswer'>\r\n                            {printShowanswer}\r\n                        </div>\r\n                    }\r\n                    <footer>\r\n                        <span id=\"progress\">Result</span><span id='time'>00:00</span>\r\n                    </footer>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null\r\n    }\r\n}\r\nexport default Result;","import React from 'react';\nimport Home from './components/home';\nimport Quiz from './components/quiz';\nimport './App.css';\nimport Result from './components/result';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listquiz: [\n        {\n          question: 'Who is stronger than Thanos ?',\n          answer: ['Surtur', 'Thor', 'Black Panther', 'Iron man'],\n          status: ['choice', 'choice', 'choice', 'choice'],\n          correct: 'Surtur'\n        },\n        {\n          question: `What's the value of 1 + 1 ?`,\n          answer: [2, 3, 4, 5],\n          status: ['choice', 'choice', 'choice', 'choice'],\n          correct: 2\n        },\n        {\n          question: 'How many countries in the world ?',\n          answer: [193, 194, 195, 196],\n          status: ['choice', 'choice', 'choice', 'choice'],\n          correct: 195\n        },\n        {\n          question: 'Who is god in DC universe?',\n          answer: ['The Presence', 'Batman', 'The One Above All', 'Green Lantern'],\n          status: ['choice', 'choice', 'choice', 'choice'],\n          correct: 'Batman'\n        },\n        {\n          question: '1 + 2 + 3 + ..... + 99 = ?',\n          answer: [4850, 4580, 4950, 4590],\n          status: ['choice', 'choice', 'choice', 'choice'],\n          correct: 4950\n        }\n\n      ],\n      currentquiz: '',\n      totalcorrect: [0, 0, 0, 0, 0],\n      isanswered: false,\n      statusbtn: ['btn1', false, true, false],\n      showanswer: ['Surtur', 2, 195, 'Batman', 4950],\n      minute: 0,\n      seconds: 0,\n      timeout: null,\n      interval: null,\n    }\n  }\n  // nút start\n  startQuiz(currentQuiz, timeOut, newInterval, newMinute, newSeconds) {\n    currentQuiz = 0;\n    let newStatusbtn = this.state.statusbtn.slice();\n    if (currentQuiz === 0) {\n      newStatusbtn[1] = true;\n    }\n    newInterval = setInterval(() => {\n      if (newSeconds === 59) {\n        newMinute++;\n        newSeconds = 0;\n      } else if (newSeconds >= 0) {\n          newSeconds++;\n        }\n      this.setState({\n        minute: newMinute,\n        seconds: newSeconds\n      })\n    }, 1000)\n    timeOut = setTimeout(() => {\n      this.setState({\n        currentquiz: 'result',\n      })\n      clearInterval(newInterval)\n    }, 30000)\n    this.setState({\n      currentquiz: currentQuiz,\n      statusbtn: newStatusbtn,\n      timeout: timeOut,\n      interval: newInterval,\n      minute: 0,\n      seconds: 0\n    })\n\n  }\n  // trạng thái chọn\n  chooseAnswer(answer, correct, currentQuiz, index) {\n    // trạng thái đã chọn\n    let newStatuslistquiz = JSON.parse(JSON.stringify(this.state.listquiz))\n    newStatuslistquiz[currentQuiz].status = ['choice', 'choice', 'choice', 'choice'];\n    newStatuslistquiz[currentQuiz].status[index] += ' selected';\n    // trạng thái nút \n    let newStatusbtn = this.state.statusbtn.slice();\n    newStatusbtn[2] = false;\n    // check answer\n    let newCorrect = this.state.totalcorrect;\n    if (answer === correct) {\n      newCorrect[currentQuiz] = 1;\n    } else {\n      newCorrect[currentQuiz] = 0;\n    }\n    this.setState({\n      statusbtn: newStatusbtn,\n      listquiz: newStatuslistquiz,\n      currentquiz: currentQuiz,\n      totalcorrect: newCorrect\n    })\n    console.log(this.state.totalcorrect)\n  }\n  // next quiz\n  nextQuestion(currentQuiz) {\n    currentQuiz++;\n    let newStatusbtn = this.state.statusbtn.slice();\n    if (currentQuiz === 4) {\n      newStatusbtn[3] = true;\n\n    } else if (currentQuiz > 0) {\n      newStatusbtn[1] = false;\n    }\n    this.setState({\n      currentquiz: currentQuiz,\n      statusbtn: newStatusbtn\n    })\n  }\n  // back quiz\n  backQuestion(currentQuiz) {\n    currentQuiz--;\n    let newStatusbtn = this.state.statusbtn.slice();\n    if (currentQuiz === 0) {\n      newStatusbtn[1] = true;\n    } else if (currentQuiz > 0) {\n      newStatusbtn[3] = false;\n    }\n    this.setState({\n      currentquiz: currentQuiz,\n      statusbtn: newStatusbtn\n    })\n  }\n  submit(currentQuiz) {\n    clearTimeout(this.state.timeout);\n    clearInterval(this.state.interval)\n    currentQuiz = 'result';\n    this.setState({\n      currentquiz: currentQuiz\n    })\n  }\n  // trang result\n  resetQuiz(newMinute,newSeconds,timeOut,newInterval) {\n    let newStatuslistquiz = JSON.parse(JSON.stringify(this.state.listquiz))\n    newStatuslistquiz[0].status = ['choice', 'choice', 'choice', 'choice'];\n    newStatuslistquiz[1].status = ['choice', 'choice', 'choice', 'choice'];\n    newStatuslistquiz[2].status = ['choice', 'choice', 'choice', 'choice'];\n    newStatuslistquiz[3].status = ['choice', 'choice', 'choice', 'choice'];\n    newStatuslistquiz[4].status = ['choice', 'choice', 'choice', 'choice'];\n    let newStatusbtn = this.state.statusbtn.slice();\n    newStatusbtn = ['btn1', true, true, false];\n    newMinute=0;\n    newSeconds=0;\n    newInterval = setInterval(() => {\n      if (newSeconds === 59) {\n        newMinute++;\n        newSeconds = 0;\n      } else if (newSeconds >= 0) {\n          newSeconds++;\n        }\n      this.setState({\n        minute: newMinute,\n        seconds: newSeconds\n      })\n    }, 1000)\n    timeOut = setTimeout(() => {\n      this.setState({\n        currentquiz: 'result',\n      })\n      clearInterval(newInterval)\n    }, 30000)\n    this.setState({\n      listquiz: newStatuslistquiz,\n      currentquiz: 0,\n      statusbtn: newStatusbtn,\n      totalcorrect: [0, 0, 0, 0, 0],\n      timeout:timeOut,\n      interval:newInterval,\n      minute:0,\n      seconds:0\n    })\n  }\n  backHome() {\n    clearTimeout(this.state.timeout);\n    clearInterval(this.state.interval);\n    let newStatuslistquiz = JSON.parse(JSON.stringify(this.state.listquiz))\n    newStatuslistquiz[0].status = ['choice', 'choice', 'choice', 'choice'];\n    newStatuslistquiz[1].status = ['choice', 'choice', 'choice', 'choice'];\n    newStatuslistquiz[2].status = ['choice', 'choice', 'choice', 'choice'];\n    newStatuslistquiz[3].status = ['choice', 'choice', 'choice', 'choice'];\n    newStatuslistquiz[4].status = ['choice', 'choice', 'choice', 'choice'];\n    let newStatusbtn = this.state.statusbtn.slice();\n    newStatusbtn = ['btn1', true, true, false];\n    this.setState({\n      listquiz: newStatuslistquiz,\n      currentquiz: '',\n      statusbtn: newStatusbtn,\n      totalcorrect: [0, 0, 0, 0, 0]\n    })\n  }\n  showAnswer() {\n    this.setState({\n      isanswered: true\n    })\n  }\n  render() {\n    const { listquiz, currentquiz, totalcorrect, isanswered, statusbtn, showanswer, minute, seconds, timeout, interval } = this.state\n    return (\n      <div className=\"App\">\n        <Home\n          currentQuiz={currentquiz}\n          startQuiz={this.startQuiz.bind(this)}\n          statusButton={statusbtn}\n          timeOut={timeout}\n          newInterval={interval}\n          newMinute={minute}\n          newSeconds={seconds}\n        />\n        <Quiz\n          listQuiz={listquiz}\n          currentQuiz={currentquiz}\n          statusButton={statusbtn}\n          checkAnswer={this.chooseAnswer.bind(this)}\n          nextQuestion={this.nextQuestion.bind(this)}\n          backQuestion={this.backQuestion.bind(this)}\n          submitQuestion={this.submit.bind(this)}\n          newCorrect={totalcorrect}\n          newMinute={minute}\n          newSeconds={seconds}\n         \n        />\n        <Result\n          listQuiz={listquiz}\n          statusButton={statusbtn}\n          currentQuiz={currentquiz}\n          resetQuiz={this.resetQuiz.bind(this)}\n          newCorrect={totalcorrect}\n          backHome={this.backHome.bind(this)}\n          showAnswer={showanswer}\n          isAnswer={isanswered}\n          printAnswer={this.showAnswer.bind(this)}\n          newMinute={minute}\n          newSeconds={seconds}\n          timeOut={timeout}\n          newInterval={interval}\n\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}