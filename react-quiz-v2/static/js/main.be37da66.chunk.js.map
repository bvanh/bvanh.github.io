{"version":3,"sources":["components/home.js","components/quiz.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","currentQuiz","className","Button","color","size","onClick","startQuiz","Quiz","listQuiz","pritQuiz","printQuiz","question","printAnswer","answer","map","index","key","id","App","state","listquiz","correct","currentquiz","totalcorrect","isanswered","this","setState","isAnswer","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAoBeA,MAhBf,SAAcC,GAAO,IACdC,EAAaD,EAAbC,YACP,MAAiB,KAAdA,EAEQ,yBAAKC,UAAU,SACZ,uDACA,6CACA,kBAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,KAAK,KAAIC,QAAS,kBAAIN,EAAMO,UAAUN,KAA9D,aAIH,MCgCIO,MA5Cf,SAAcR,GAAQ,IACVS,EAA0BT,EAA1BS,SAAUR,EAAgBD,EAAhBC,YAElB,GAAoB,KAAhBA,EAAoB,CAEpB,IAAMS,EAAWD,EAASR,IAAgB,GACpCU,EAAYD,EAASE,SAErBC,GADaH,EAASI,QAAU,IACPC,KAAI,SAACD,EAAQE,GAAT,OAE/B,4BAAQd,UAAU,SAASe,IAAKD,GAAQF,MAG5C,OACI,6BACI,wBAAIZ,UAAU,KAAd,QACA,yBAAKA,UAAU,QACX,4BACKS,GAEJE,EACD,6BACA,0BAAMX,UAAU,OAAhB,QAAiC,0BAAMA,UAAU,OAAhB,SAEjC,gCACH,0BAAMgB,GAAG,YAAT,YAA8BjB,EAAY,EAA1C,SAAwD,0BAAMiB,GAAG,QAAT,SAA4B,0BAAMA,GAAG,SAAT,cAM7F,OAAO,MCiCAC,G,kBA9Db,WAAYnB,GAAQ,IAAD,8BACjB,4CAAMA,KACDoB,MAAQ,CACXC,SAAU,CACR,CACET,SAAU,gCACVE,OAAQ,CAAC,SAAU,OAAQ,gBAAiB,YAC5CQ,QAAS,UAEX,CACEV,SAAS,8BACTE,OAAQ,CAAC,EAAG,EAAG,EAAG,GAClBQ,QAAS,GAEX,CACEV,SAAU,oCACVE,OAAQ,CAAC,IAAK,IAAK,IAAK,KACxBQ,QAAS,KAEX,CACEV,SAAU,6BACVE,OAAQ,CAAC,eAAgB,SAAU,oBAAqB,iBACxDQ,QAAS,UAEX,CACEV,SAAU,6BACVE,OAAQ,CAAC,KAAM,KAAM,KAAM,MAC3BQ,QAAS,OAIbC,YAAa,GACbC,aAAc,EACdC,YAAY,GAjCG,E,uEAqCTxB,GAERyB,KAAKC,SAAS,CACZJ,YAFU,M,+BAKJ,IAAD,SACqDG,KAAKN,MAAzDC,EADD,EACCA,SAAUE,EADX,EACWA,YAA2BE,GADtC,EACwBD,aADxB,EACsCC,YAC7C,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,CACED,YAAasB,EACbhB,UAAW,kBAAM,EAAKA,eAExB,kBAAC,EAAD,CACEE,SAAUY,EACVpB,YAAasB,EACbK,SAAUH,S,GAvDFI,IAAMC,Y,MCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.be37da66.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\n\r\nfunction Home(props){\r\nconst {currentQuiz}=props\r\nif(currentQuiz===''){\r\n    return(\r\n           <div className=\"start\">\r\n              <h1>Welcome to Quiz-Game !?</h1>\r\n              <h4>In 15 seconds</h4>\r\n              <Button color=\"primary\" size=\"lg\"onClick={()=>props.startQuiz(currentQuiz)}>Let's Go</Button>\r\n          </div>\r\n    )\r\n}else {\r\n    return null\r\n}\r\n\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport { Button } from 'reactstrap';\r\n\r\nfunction Quiz(props) {\r\n    const { listQuiz, currentQuiz } = props\r\n\r\n    if (currentQuiz !== '') {\r\n\r\n        const pritQuiz = listQuiz[currentQuiz] || {};\r\n        const printQuiz = pritQuiz.question;\r\n        const listAnswer = pritQuiz.answer || [];\r\n        const printAnswer = listAnswer.map((answer, index) =>\r\n\r\n            <button className='choice' key={index}>{answer}</button>\r\n\r\n        )\r\n        return (\r\n            <div>\r\n                <h1 className='a'>Quiz</h1>\r\n                <div className='quiz'>\r\n                    <h3>\r\n                        {printQuiz}\r\n                    </h3>\r\n                    {printAnswer}\r\n                    <div>\r\n                    <span className='btn'>Back</span><span className='btn'>Next</span>\r\n                    </div>\r\n                    <footer>\r\n                 <span id=\"progress\">Question {currentQuiz+1} of 5</span><span id='time'>00:00</span><span id=\"score\">Score: </span>\r\n                    </footer>\r\n                </div>\r\n            </div>\r\n        )\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Quiz;","import React from 'react';\nimport Home from './components/home';\nimport Quiz from './components/quiz';\nimport './App.css';\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listquiz: [\n        {\n          question: 'Who is stronger than Thanos ?',\n          answer: ['Surtur', 'Thor', 'Black Panther', 'Iron man'],\n          correct: 'Surtur'\n        },\n        {\n          question: `What's the value of 1 + 1 ?`,\n          answer: [2, 3, 4, 5],\n          correct: 2\n        },\n        {\n          question: 'How many countries in the world ?',\n          answer: [193, 194, 195, 196],\n          correct: 195\n        },\n        {\n          question: 'Who is god in DC universe?',\n          answer: ['The Presence', 'Batman', 'The One Above All', 'Green Lantern'],\n          correct: 'Batman'\n        },\n        {\n          question: '1 + 2 + 3 + ..... + 99 = ?',\n          answer: [4850, 4580, 4950, 4590],\n          correct: 4950\n        }\n\n      ],\n      currentquiz: '',\n      totalcorrect: 0,\n      isanswered: false,\n\n    }\n  }\n  startQuiz(currentQuiz) {\n    currentQuiz=0;\n    this.setState({\n      currentquiz:currentQuiz\n    })\n  }\n  render() {\n    const { listquiz, currentquiz, totalcorrect, isanswered } = this.state\n    return (\n      <div className=\"App\">\n        <Home\n          currentQuiz={currentquiz}\n          startQuiz={() => this.startQuiz()}\n        />\n        <Quiz\n          listQuiz={listquiz}\n          currentQuiz={currentquiz}\n          isAnswer={isanswered}\n        />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}