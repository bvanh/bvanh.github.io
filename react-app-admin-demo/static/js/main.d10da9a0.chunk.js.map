{"version":3,"sources":["serviceWorker.js","component/form/login.js","component/admin/table.js","component/admin/mainboard.js","component/data-user.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","LoginForm","props","placeholder","prefix","type","style","color","suffix","title","onChange","getUsername","required","Password","getPassword","htmlType","className","onClick","submit","href","columns","dataIndex","key","render","text","src","alt","price","toLocaleString","record","Danhsach","state","data","demo","this","getData","fetch","response","json","responseJson","setState","datahotel","console","log","error","dataSource","React","Component","Header","Content","Footer","Sider","SubMenu","Mainboard","currentuser","minHeight","collapsible","collapsed","onCollapse","theme","defaultSelectedKeys","mode","Item","background","padding","margin","textAlign","user","username","password","SiderDemo","islogin","isuser","ispassword","e","name","target","value","map","item","bind","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d10da9a0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Form, Input, Tooltip, Icon, Button } from 'antd';\r\nimport React from 'react';\r\n\r\n\r\n\r\nexport default function LoginForm(props) {\r\n\r\n    return (\r\n        <div>\r\n            <Form>\r\n                <Input\r\n                    placeholder=\"Enter your username\"\r\n                    prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                    suffix={\r\n                        <Tooltip title=\"Extra information\">\r\n                            <Icon type=\"info-circle\" style={{ color: 'rgba(0,0,0,.45)' }} />\r\n                        </Tooltip>\r\n                    }\r\n                    onChange={props.getUsername}\r\n                    required\r\n                />\r\n                <Input.Password\r\n                    prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    onChange={props.getPassword}\r\n                    required\r\n                />\r\n                <Button\r\n                    type=\"primary\"\r\n                    htmlType=\"submit\"\r\n                    className=\"login-form-button\"\r\n                    onClick={props.submit}\r\n                >\r\n                    Log in\r\n                </Button>\r\n                Or <a href='/'>register now!</a>\r\n            </Form>\r\n        </div>\r\n    )\r\n}","import { Table, Divider } from 'antd';\r\nimport React from 'react'\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Avatar',\r\n        dataIndex: 'src',\r\n        key: 'avatar',\r\n        render: text => <img className='avatar' src={text} alt='anh demo' />,\r\n    },\r\n    {\r\n        title: 'Name',\r\n        dataIndex: 'ten',\r\n        key: 'name',\r\n    },\r\n    {\r\n        title: 'Location',\r\n        dataIndex: 'vitri',\r\n        key: 'localtion',\r\n    },\r\n    {\r\n        title: 'Price',\r\n        dataIndex: 'gia',\r\n        key: 'price',\r\n        render: price => <span>{price.toLocaleString()} vnđ</span>\r\n    },\r\n    {\r\n        title: 'Rate',\r\n        dataIndex: 'danhgia',\r\n        key: 'rating',\r\n    },\r\n    {\r\n        title: 'Action',\r\n        key: 'action',\r\n        render: (text, record) => (\r\n            <span>\r\n                <a href='/'>Edit </a>\r\n                <Divider type=\"vertical\" />\r\n                <a href='/'>Delete</a>\r\n            </span>\r\n        ),\r\n    },\r\n];\r\nexport default class Danhsach extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            data: [],\r\n            demo: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.getData();\r\n    }\r\n    async getData() {\r\n        try {\r\n            let response = await fetch('https://raw.githubusercontent.com/bvanh/data-demo-react-app/master/data.json');\r\n            let responseJson = await response.json();\r\n            this.setState({\r\n                data: responseJson.datahotel\r\n            })\r\n            console.log(responseJson)\r\n        } catch (error) {\r\n            console.error(error);\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Table\r\n                    columns={columns}\r\n                    dataSource={this.state.data}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Layout, Menu, Breadcrumb, Icon } from 'antd';\r\nimport Danhsach from '../admin/table';\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\n\r\n\r\nexport default function Mainboard(props) {\r\n    const { currentuser } = props\r\n    return (\r\n        <Layout style={{ minHeight: '100vh' }}>\r\n            <Sider collapsible\r\n                collapsed={props.collapsed}\r\n                onCollapse={props.onCollapse}>\r\n                <div className=\"logo\"\r\n                />\r\n                <Menu theme=\"dark\" defaultSelectedKeys={['1']} mode=\"inline\">\r\n                    <Menu.Item>\r\n                        <Icon type=\"user\" />\r\n                        <span>{currentuser}</span>\r\n                    </Menu.Item>\r\n                    <SubMenu\r\n                        key=\"sub2\"\r\n                        title={\r\n                            <span>\r\n                                <Icon type=\"team\" />\r\n                                <span>Team</span>\r\n                            </span>\r\n                        }\r\n                    >\r\n                        <Menu.Item key=\"6\">Team 1</Menu.Item>\r\n                        <Menu.Item key=\"8\">Team 2</Menu.Item>\r\n                    </SubMenu>\r\n                    <Menu.Item key=\"9\">\r\n                        <Icon type=\"file\" />\r\n                        <span>File</span>\r\n                    </Menu.Item>\r\n                </Menu>\r\n            </Sider>\r\n            <Layout>\r\n                <Header style={{ background: '#fff', padding: 0 }} />\r\n                <Content style={{ margin: '0 16px' }}>\r\n                    <Breadcrumb style={{ margin: '16px 0' }}>\r\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                        <Breadcrumb.Item>Detail</Breadcrumb.Item>\r\n                    </Breadcrumb>\r\n                    <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\r\n                        <Danhsach />\r\n                    </div>\r\n                </Content>\r\n                <Footer style={{ textAlign: 'center' }}>this is futter</Footer>\r\n            </Layout>\r\n        </Layout>\r\n    )\r\n}","const data = {\r\n    user: [\r\n        {\r\n            username: 'admin',\r\n            password: 'admin'\r\n        },\r\n        {\r\n            username: 'anh',\r\n            password: 'admin'\r\n        }\r\n    ]\r\n}\r\nexport default data;","import React from 'react';\nimport LoginForm from './component/form/login'\nimport Mainboard from './component/admin/mainboard';\nimport data from './component/data-user'\nexport default class SiderDemo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      collapsed: false,\n      user: data.user,\n      islogin: true,\n      isuser: '',\n      ispassword: '',\n      currentuser: 'admin'\n    };\n  }\n  onCollapse = collapsed => {\n    this.setState({ collapsed });\n  };\n  getUsername(e) {\n    const name = e.target.value;\n    this.setState({\n      isuser: name\n    })\n  }\n  getPassword(e) {\n    const password = e.target.value;\n    this.setState({\n      ispassword: password\n    })\n  }\n  submit() {\n    const { isuser, ispassword, user } = this.state\n    user.map((item) => {\n      if (item.username === isuser && item.password === ispassword) {\n        this.setState({\n          islogin: true,\n          currentuser: isuser,\n        });\n      }\n    });\n  }\n  render() {\n    const { islogin, currentuser } = this.state\n    return (\n      <div>\n        {islogin === false &&\n          <LoginForm\n            getUsername={this.getUsername.bind(this)}\n            getPassword={this.getPassword.bind(this)}\n            submit={this.submit.bind(this)}\n          />\n        }\n        {islogin &&\n          <Mainboard\n            collapsed={this.state.collapsed}\n            onCollapse={this.onCollapse.bind(this)}\n            currentuser={currentuser}\n          />\n        }\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport SiderDemo from './App';\n\nReactDOM.render(<SiderDemo />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}